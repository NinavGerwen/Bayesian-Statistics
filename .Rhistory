b1[i] <- rnorm(n = 1, mean = mean.1.post, sd = sqrt(sd.1.post))
} else {
## If through MH:
## First...
}
## Then, every loop, we update the regression coefficient of the second variable
## But first check whether Gibbs oR MH:
if(method[3] == "0") {
## If through Gibbs:
## We update the mean and standard deviation of the regression coefficient for the second variable
## using the updated value of both the intercept and b1
mean.2.post <- (sum(X2*(Y - b0[i] - b1[i]*X1), na.rm = TRUE)/vari[i - 1] + (mu2 / sigma2)) / ((sum(X2^2, na.rm = TRUE)/vari[i - 1]) + (1 / sigma2))
sd.2.post <- 1/((sum(X2^2, na.rm = TRUE) / vari[i - 1]) + (1 / sigma2))
## Then, we randomly sample a new b2
b2[i] <- rnorm(n = 1, mean = mean.2.post, sd = sqrt(sd.2.post))
} else {
## If through MH:
## ...
}
## Finally, we update the parameters for the distribution of our variance using all above updated values
a.post <- (N / 2) + a.prior
b.post <- (sum((Y - (b0[i] + b1[i]*X1 + b2[i]*X2))^2, na.rm = TRUE) / 2) + b.prior
## And randomly sample a new variance again through rgamma
vari[i] <- 1/rgamma(n = 1, shape = a.post, rate = b.post)
## We use the inverse of the randomly sample because we want the value of the variance, and not the precision.
}
## Then, we remove the values of the burn-in
b0 <- b0[-c(1:burn.in)]
b1 <- b1[-c(1:burn.in)]
b2 <- b2[-c(1:burn.in)]
vari <- vari[-c(1:burn.in)]
## We also want the posterior distributions (histograms) of all parameters
par(mfrow = c(2,2))
hist(b0, breaks = 50)
abline(v = mean(b0), col = "blue")
hist(b1, breaks = 50)
abline(v = mean(b1), col = "blue")
hist(b2, breaks = 50)
abline(v = mean(b2), col = "blue")
hist(vari, breaks = 50)
## We want a dataframe consisting of all the sampled parameter values
data_frame <- as.data.frame(cbind(b0, b1, b2, vari, iter = 1:length(b0)))
## And we want traceplots for all the parameters to assess convergence
traceplot1 <- ggplot(data_frame, aes(x=iter, y=b0)) +
geom_line() +
labs(title="b0 trace")
traceplot1
traceplot2 <- ggplot(data_frame, aes(x=iter, y=b1)) +
geom_line() +
labs(title="b1 trace")
traceplot2
traceplot3 <- ggplot(data_frame, aes(x=iter, y=b2)) +
geom_line() +
labs(title="b2 trace")
traceplot3
traceplot4 <- ggplot(data_frame, aes(x=iter, y=vari)) +
geom_line() +
labs(title="var trace")
traceplot4
## We create a list of all the output we want
list_of_output <- list(data_frame, traceplot1, traceplot2, traceplot3, traceplot4)
## And finally, we ask the function to return this list of output
return(list_of_output)
}
## Testing the sampler
library(haven)
data <- read_sav("Exercise 2 - Data.sav")
str(data)
summary(lm(attitude ~ extraversion + agreeableness, data = data))
GibbsSampler(data$attitude, data$extraversion, data$agreeableness, burn.in = 1000, iterations = 10000, initial.values = c(50, .05, .1))
## Testing the sampler
library(haven)
data <- read_sav("Exercise 2 - Data.sav")
str(data)
summary(lm(attitude ~ extraversion + agreeableness, data = data))
GibbsSampler(data$attitude, data$extraversion, data$agreeableness, burn.in = 1000, iterations = 10000, initial.values = c(50, .05, .1))
## Comparing results to JAGS results
library(haven)
testdat <- read_sav(file = "Week6Data2.sav")
testdat$pass <- as.numeric(testdat$pass)
testdat$verbal <- testdat$verbal - mean(testdat$verbal)
summary(lm(IQ ~ verbal + SES, data = testdat))
set.seed(3)
GibbsSampler(testdat$IQ, testdat$verbal, testdat$SES, burn.in = 5000, iterations = 25000, initial.values = c(1, 1, 1), method = c("0", "0", "0"))
list <- GibbsSampler(testdat$IQ, testdat$verbal, testdat$pass, burn.in = 2500, iterations = 12500, initial.values = c(1, 1, 1))
df <- as.data.frame(list[1])
mean(df$b0)
mean(df$b1)
mean(df$b2)
mean(testdat$IQ)
var(testdat$IQ)
cor(1:100, 1:99)
?cor
cor(1:100, 1:99, use = "complete.obs")
cor(1:100, 1:99, use = "pairwise.complete.obs")
cor(1:100, 1:99, use = "all.obs")
cor(1:100, 1:99, use = "na.or.complete")
1:100
1:99
cor(1:100, );99, use = "pairwise.complete.obs")
cor(1:100, 1:99, use = "pairwise.complete.obs")
cor(1:100, 0:99, use = "pairwise.complete.obs")
cor(1:100, -1:98, use = "pairwise.complete.obs")
autocorrelationplot <- function(V, lag) {
autocors <- rep(NA, lag)
for(i in 1:lag) {
V2 <- c(rep(0, i), V)
V <- c(V, rep(0, i))
autocors[i] <- cor(V[, - i], V2[i + 1 ,])
}
}
autocorrelationplot <- function(V, lag) {
autocors <- rep(NA, lag)
for(i in 1:lag) {
V2 <- c(rep(0, i), V)
V <- c(V, rep(0, i))
autocors[i] <- cor(V[, length(V) - i], V2[i + 1 ,])
}
return(autocors)
}
autocorrelationplot(df$b1)
autocorrelationplot <- function(V, lag = 50) {
autocors <- rep(NA, lag)
for(i in 1:lag) {
V2 <- c(rep(0, i), V)
V <- c(V, rep(0, i))
autocors[i] <- cor(V[, length(V) - i], V2[i + 1 ,])
}
return(autocors)
}
> autocorrelationplot <- function(V, lag = 50) {
autocorrelationplot <- function(V, lag = 50) {
\autocorrelationplot <- function(V, lag = 50)
autocorrelationplot(V = df$b1)
autocors[i] <- cor(V[, length(V) - i], V2[i + 1 ,], use = "pairwise.complete.obs")
autocorrelationplot <- function(V, lag = 50) {
autocors <- rep(NA, lag)
for(i in 1:lag) {
V2 <- c(rep(0, i), V)
V <- c(V, rep(0, i))
autocors[i] <- cor(V[, length(V) - i], V2[i + 1 ,], use = "pairwise.complete.obs")
}
return(autocors)
}
autocorrelationplot(V = df$b1)
autocorrelationplot <- function(V, lag = 50) {
autocors <- rep(NA, lag)
for(i in 1:lag) {
V2 <- c(rep(0, i), V)
V1 <- c(V, rep(0, i))
autocors[i] <- cor(V1[, length(V1) - i], V2[i + 1 ,], use = "pairwise.complete.obs")
}
return(autocors)
}
autocorrelationplot(V = df$b1)
df$b1
V
autocorrelationplot <- function(V, lag = 50) {
autocors <- rep(NA, lag)
for(i in 1:lag) {
V2 <- c(rep(0, i), V)
V1 <- c(V, rep(0, i))
autocors[i] <- cor(V1[length(V1) - i], V2[i + 1])
}
return(autocors)
}
autocorrelationplot(V = df$b1)
autocorrelationplot(V = df$b1)
autocors[i] <- cor(V1[length(V1) - i], V2[i + 1], use = "pairwise.complete.obs")
autocorrelationplot <- function(V, lag = 50) {
autocors <- rep(NA, lag)
for(i in 1:lag) {
V2 <- c(rep(0, i), V)
V1 <- c(V, rep(0, i))
autocors[i] <- cor(V1[length(V1) - i], V2[i + 1], use = "pairwise.complete.obs")
}
return(autocors)
}
autocorrelationplot(V = df$b1)
print(V2)
autocorrelationplot <- function(V, lag = 50) {
autocors <- rep(NA, lag)
for(i in 1:lag) {
V2 <- c(rep(0, i), V)
V1 <- c(V, rep(0, i))
autocors[i] <- cor(V1[length(V1) - i], V2[i + 1], use = "pairwise.complete.obs")
}
print(V1)
print(V2)
return(autocors)
}
autocorrelationplot(V = df$b1)
autocorrelationplot <- function(V, lag = 50) {
autocors <- rep(NA, lag)
for(i in 1:lag) {
V2 <- c(rep(0, i), V)
V1 <- c(V, rep(0, i))
V
autocors[i] <- cor(V1[length(V1) - i], V2[-(1:i)], use = "pairwise.complete.obs")
}
print(V1)
print(V2)
return(autocors)
}
autocorrelationplot(V = df$b1)
autocorrelationplot <- function(V, lag = 50) {
autocors <- rep(NA, lag)
for(i in 1:lag) {
V2 <- c(rep(0, i), V)
V1 <- c(V, rep(0, i))
V
autocors[i] <- cor(V1[length(V1) - i], V2[i + 1], use = "pairwise.complete.obs")
}
print(V1)
print(V2)
return(autocors)
}
autocorrelationplot(V = df$b1)
autocorrelationplot <- function(V, lag = 50) {
autocors <- rep(NA, lag)
for(i in 1:lag) {
V2 <- c(rep(0, i), V)
V1 <- c(V, rep(0, i))
V2 <- V2[-1:i]
autocors[i] <- cor(V1[length(V1) - i], V2, use = "pairwise.complete.obs")
}
print(V1)
print(V2)
return(autocors)
}
autocorrelationplot(V = df$b1)
autocorrelationplot <- function(V, lag = 50) {
autocors <- rep(NA, lag)
for(i in 1:lag) {
V2 <- c(rep(0, i), V)
V1 <- c(V, rep(0, i))
V2 <- V2[-(1:i)]
autocors[i] <- cor(V1[length(V1) - i], V2, use = "pairwise.complete.obs")
}
print(V1)
print(V2)
return(autocors)
}
autocorrelationplot(V = df$b1)
autocorrelationplot <- function(V, lag = 50) {
autocors <- rep(NA, lag)
for(i in 1:lag) {
V2 <- c(rep(0, i), V)
V1 <- c(V, rep(0, i))
V2 <- V2[-(1:i)]
autocors[i] <- cor(V1[length(V1) - i], V2)
}
print(V1)
print(V2)
return(autocors)
}
autocorrelationplot(V = df$b1)
autocorrelationplot <- function(V, lag = 50) {
autocors <- rep(NA, lag)
for(i in 1:lag) {
V2 <- c(rep(0, i), V)
V1 <- c(V, rep(0, i))
V2 <- V2[-(1:i)]
V1 <- V1[-(length(V1) - i:length(V1))]
autocors[i] <- cor(V1, V2)
}
print(V1)
print(V2)
return(autocors)
}
autocorrelationplot(V = df$b1)
autocorrelationplot <- function(V, lag = 50) {
autocors <- rep(NA, lag)
for(i in 1:lag) {
V2 <- c(rep(0, i), V)
V1 <- c(V, rep(0, i))
matrix <- cbind(V2, V1)
matrix[-c(1:i, length(matrix - i):length(matrix))]
autocors[i] <- cor(V1, V2)
}
print(V1)
print(V2)
return(autocors)
}
autocorrelationplot <- function(V, lag = 50) {
autocors <- rep(NA, lag)
for(i in 1:lag) {
V2 <- c(rep(0, i), V)
V1 <- c(V, rep(0, i))
matrix <- cbind(V2, V1)
matrix[-c(1:i, length(matrix - i):length(matrix))]
autocors[i] <- cor(matrix)
}
print(V1)
print(V2)
return(autocors)
}
autocorrelationplot(V = df$b1)
autocorrelationplot <- function(V, lag = 50) {
autocors <- rep(NA, lag)
for(i in 1:lag) {
V2 <- c(rep(0, i), V)
V1 <- c(V, rep(0, i))
matrix <- cbind(V2, V1)
matrix[-c(1:i, length(matrix - i):length(matrix))]
autocors[i] <- cor(matrix)
}
return(autocors)
}
autocorrelationplot(V = df$b1)
autocorrelationplot <- function(V, lag = 50) {
autocors <- rep(NA, lag)
for(i in 1:lag) {
V2 <- c(rep(0, i), V)
V1 <- c(V, rep(0, i))
matrix <- cbind(V2, V1)
matrix[-c(1:i, length(matrix - i):length(matrix))]
autocors[i] <- cor(matrix)
}
return(autocors)
}
autocorrelationplot(V = df$b1)
autocorrelationplot <- function(V, lag = 50) {
autocors <- rep(NA, lag)
for(i in 1:lag) {
V2 <- c(rep(0, i), V)
V1 <- c(V, rep(0, i))
matrix <- cbind(V2, V1)
matrix[-c(1:i, length(matrix - i):length(matrix)) ,]
autocors[i] <- cor(matrix)
}
return(autocors)
}
autocorrelationplot(V = df$b1)
?head
autocorrelationplot <- function(V, lag = 50) {
autocors <- rep(NA, lag)
for(i in 1:lag) {
V2 <- c(rep(0, i), V)
V1 <- c(V, rep(0, i))
matrix <- cbind(V2, V1)
matrix <- head(matrix, -i)
matrix <- tails(matrix, -i)
autocors[i] <- cor(matrix)
}
return(autocors)
}
autocorrelationplot(V = df$b1)
autocorrelationplot <- function(V, lag = 50) {
autocors <- rep(NA, lag)
for(i in 1:lag) {
V2 <- c(rep(0, i), V)
V1 <- c(V, rep(0, i))
matrix <- cbind(V2, V1)
matrix <- head(matrix, -i)
matrix <- tail(matrix, -i)
autocors[i] <- cor(matrix)
}
return(autocors)
}
autocorrelationplot(V = df$b1)
cor(df$b1, df$b1 - 1)
cor(df$b1, df$b1 - 1)[1]
autocorrelationplot <- function(V, lag = 50) {
autocors <- rep(NA, lag)
for(i in 1:lag) {
V2 <- c(rep(0, i), V)
V1 <- c(V, rep(0, i))
matrix <- cbind(V2, V1)
matrix <- head(matrix, -i)
matrix <- tail(matrix, -i)
autocors[i] <- cor(matrix)
}
return(matrix)
}
autocorrelationplot(V = df$b1)
autocorrelationplot <- function(V, lag = 50) {
autocors <- rep(NA, lag)
for(i in 1:lag) {
V1 <- c(V, rep(0, i))
V2 <- c(rep(0, i), V)
matrix <- cbind(V1, V2)
matrix <- head(matrix, -i)
matrix <- tail(matrix, -i)
autocors[i] <- cor(matrix)
}
return(matrix)
}
autocorrelationplot(V = df$b1)
autocorrelationplot <- function(V, lag = 50) {
autocors <- rep(NA, lag)
for(i in 1:lag) {
V1 <- c(V, rep(0, i))
V2 <- c(rep(0, i), V)
matrix <- cbind(V1, V2)
matrix <- head(matrix, -i)
matrix <- tail(matrix, -i)
autocors[i] <- cor(matrix)[1]
}
return(matrix)
}
autocorrelationplot(V = df$b1)
cor(df$b1, df$b1 - 1)[1]
autocorrelationplot <- function(V, lag = 50) {
autocors <- rep(NA, lag)
for(i in 1:lag) {
V1 <- c(V, rep(0, i))
V2 <- c(rep(0, i), V)
matrix <- cbind(V1, V2)
matrix <- head(matrix, -i)
matrix <- tail(matrix, -i)
autocors[i] <- cor(matrix)[1]
}
return(autocors)
}
autocorrelationplot(V = df$b1)
autocorrelationplot(V = df$b2)
autocorrelationplot <- function(V, lag = 50) {
autocors <- rep(NA, lag)
for(i in 1:lag) {
V1 <- c(V, rep(0, i))
V2 <- c(rep(0, i), V)
matrix <- cbind(V1, V2)
matrix <- head(matrix, -i)
matrix <- tail(matrix, -i)
autocors[i] <- cor(matrix, use = "pairwise.complete.obs")[1]
}
return(autocors)
}
autocorrelationplot(V = df$b2)
?cor
autocorrelationplot <- function(V, lag = 50) {
autocors <- rep(NA, lag)
for(i in 1:lag) {
V1 <- c(V, rep(0, i))
V2 <- c(rep(0, i), V)
matrix <- cbind(V1, V2)
matrix <- head(matrix, -i)
matrix <- tail(matrix, -i)
autocors[i] <- cor(matrix[, 1], matrix[, 2])[1]
}
return(autocors)
}
autocorrelationplot(V = df$b2)
autocorrelationplot <- function(V, lag = 50) {
autocors <- rep(NA, lag)
for(i in 1:lag) {
V1 <- c(V, rep(0, i))
V2 <- c(rep(0, i), V)
matrix <- cbind(V1, V2)
matrix <- head(matrix, -i)
matrix <- tail(matrix, -i)
autocors[i] <- cor(matrix[, 1], matrix[, 2])[1]
}
return(autocors)
plot(autocors)
}
autocorrelationplot(V = df$b2)
autocorrelationplot <- function(V, lag = 50) {
autocors <- rep(NA, lag)
for(i in 1:lag) {
V1 <- c(V, rep(0, i))
V2 <- c(rep(0, i), V)
matrix <- cbind(V1, V2)
matrix <- head(matrix, -i)
matrix <- tail(matrix, -i)
autocors[i] <- cor(matrix[, 1], matrix[, 2])[1]
}
return(autocors)
plot(1:lag, autocors)
}
autocorrelationplot(V = df$b2)
autocorrelationplot <- function(V, lag = 50) {
autocors <- rep(NA, lag)
for(i in 1:lag) {
V1 <- c(V, rep(0, i))
V2 <- c(rep(0, i), V)
matrix <- cbind(V1, V2)
matrix <- head(matrix, -i)
matrix <- tail(matrix, -i)
autocors[i] <- cor(matrix[, 1], matrix[, 2])[1]
}
plot(1:lag, autocors)
return(autocors)
}
autocorrelationplot(V = df$b2)
autocorrelationplot(V = df$b1)
autocorrelationplot(V = df$b0)
autocorrelationplot(V = df$vari)
autocorrelationplot(V = df$b1)
autocorrelationplot(V = df$b2)
autocorrelationplot(V = df$b2)
## Testing the sampler
library(haven)
data <- read_sav("Exercise 2 - Data.sav")
str(data)
summary(lm(attitude ~ extraversion + agreeableness, data = data))
GibbsSampler(data$attitude, data$extraversion, data$agreeableness, burn.in = 1000, iterations = 10000, initial.values = c(50, .05, .1))
autocorrelationplot <- function(V, lag = 50) {
autocors <- rep(NA, lag)
for(i in 1:lag) {
V1 <- c(V, rep(0, i))
V2 <- c(rep(0, i), V)
matrix <- cbind(V1, V2)
matrix <- head(matrix, -i)
matrix <- tail(matrix, -i)
autocors[i] <- cor(matrix[, 1], matrix[, 2])[1]
}
plot(1:lag, autocors)
return(autocors)
}
autocorrelationplot(V = df$b2)
